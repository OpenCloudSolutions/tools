#! /usr/bin/env -S bash -e
#
# This will be used to sync the backend with remote
# terraform state.
#
# author: Nick Sladic

terraform() {
    local tf_exe=$(which terraform)
    [[ -z ${tf_exe} ]] && tf_exe=terraform
    (set -x; "$tf_exe" "$@")
}

verify_file() {
    [[ ! -f $1 ]] && return 1
    return 0;
}

get_tf_var() {
    local name=${1}
    env_var=$(expand -- *.tfvars | grep -E "^${name} *=" \
    | tr -d '[:space:]' | sed -e "s/^${name} *= *//" -e "s/\"//g")
    [[ ! -z "$env_var" ]] && echo "$env_var"
}

tf_precheck() {
    # check for required terraform variables file
    if [[ ! -f "${PWD}/terraform.tfvars" ]]; then
        echo -e "terraform.tfvars not found in current directory" >&2
        exit 2
    fi
}

prog=${0##/}

env=$(get-env-dir)
credentials=$(get_tf_var credentials)
cred_fn=${credentials##*/}
creds="$(dirname "$credentials")/$cred_fn"
project=$(get_tf_var project)
# GCS State Bucket
bucket="ocs-${env}-tfstate"

files=("main.tf" "terraform.tfvars" "variables.tf" "version.tf")

for file in "${files[@]}"; do
    echo "Testing: $file"
    verify_file "$file"
    exe_status=$?
    if (( "$exe_status" == 1 )); then
        echo "$prog: file not found: $exe_status"
        break;
    fi
    # add new files to the credential array
done

if [[ ! -f $creds ]]; then
    echo "Couldn't find credentials file: $creds"
    exit 1
fi


tf_remote_sync_args=()

